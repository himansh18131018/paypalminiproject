openapi: 3.0.0
info:
  title: Himanshu Tiwari
  description: api
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/himan/sample1813/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://api.github.com
  description: Github api endpoint
paths:
  /product:
    put:
      tags:
      - Product
      summary: Update an existing Product item via json
      operationId: updateProduct
      parameters:
      - name: body
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Product'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    post:
      tags:
      - Product
      summary: Add a new product
      operationId: addProduct
      parameters:
      - name: body
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Product'
      responses:
        "200":
          description: Successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /product/{id}:
    get:
      tags:
      - Product
      summary: Find product by SKU
      description: Returns a single product
      operationId: getProductByid
      parameters:
      - name: id
        in: path
        description: ID or the SKU of the product to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Invalid  SKU supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags:
      - Product
      summary: Update an existing Product item via a form
      operationId: updateProductForm
      parameters:
      - name: id
        in: path
        description: SKU of the product
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: name
        in: query
        description: Name of the product
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: price
        in: query
        description: Price of the product without tax
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: category
        in: query
        description: Category ID
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: size
        in: query
        description: Size of the product
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - small
          - medium
          - large
      - name: colour
        in: query
        description: Colour of the product
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        description: State of the product
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - live
          - draft
      - name: brand
        in: query
        description: brand of the product
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mode
        in: query
        description: Mode of availability of theproduct
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - online
          - offline
          - both
      - name: metadata
        in: query
        description: metadata of the product
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
      - Product
      summary: Deletes a single product
      description: delete
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        description: Product SKU to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid SKU supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /product/findByName:
    get:
      tags:
      - Find By
      summary: Finds Products by Name
      operationId: findProductsByName
      parameters:
      - name: name
        in: query
        description: Name filter that has to be applied
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProdDictResp'
        "400":
          description: Invalid Name value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /product/findByCategory:
    get:
      tags:
      - Find By
      summary: Finds Products by category
      operationId: findProductsByCategory
      parameters:
      - name: category
        in: query
        description: category filter that has to be applied
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProdDictResp'
        "400":
          description: Invalid category value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /product/findByState:
    get:
      tags:
      - Find By
      summary: Finds Products by State
      operationId: findProductsByState
      parameters:
      - name: state
        in: query
        description: State filter that has to be applied
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - live
          - draft
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProdDictResp'
        "400":
          description: Invalid State value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /product/findByBrand:
    get:
      tags:
      - Find By
      summary: Finds Products by Brand
      operationId: findProductsByBrand
      parameters:
      - name: brand
        in: query
        description: Brand filter that has to be applied
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProdDictResp'
        "400":
          description: Invalid State value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /product/findByColour:
    get:
      tags:
      - Find By
      summary: Finds Products by Colour
      operationId: findProductsByColour
      parameters:
      - name: colour
        in: query
        description: Colour filter that has to be applied
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProdDictResp'
        "400":
          description: Invalid Colour value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /product/findBySize:
    get:
      tags:
      - Find By
      summary: Finds Products by Size
      operationId: findProductsBySize
      parameters:
      - name: size
        in: query
        description: Size filter that has to be applied
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - small
          - medium
          - large
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProdDictResp'
        "400":
          description: Invalid Size value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /category:
    put:
      tags:
      - Category
      summary: Update an existing Category
      operationId: updateCat
      parameters:
      - name: body
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Category'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    post:
      tags:
      - Category
      summary: Add a new category
      operationId: addCat
      parameters:
      - name: body
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Category'
      responses:
        "200":
          description: Successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /category/{id}:
    get:
      tags:
      - Category
      summary: Find category by cid
      description: Returns a single category
      operationId: getCategoryByid
      parameters:
      - name: id
        in: path
        description: ID or the SKU of the Category to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "400":
          description: Invalid  SKU supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
      - Category
      summary: Deletes a single Category and all the products with that cid
      operationId: deleteCategory
      parameters:
      - name: id
        in: path
        description: Category cid to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid SKU supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user
      operationId: createUser
      parameters:
      - name: body
        in: path
        description: Created user object
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      parameters:
      - name: body
        in: path
        description: List of user object
        required: true
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      parameters:
      - name: body
        in: path
        description: List of user object
        required: true
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "400":
          description: Invalid username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: body
        in: path
        description: Updated user object
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/User'
      responses:
        "400":
          description: Invalid user supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Category:
      required:
      - id
      - name
      - tax
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tax:
          maximum: 1
          minimum: 0
          type: number
          description: Percentage of tax on the items of this category
    Product:
      required:
      - category
      - id
      - mode
      - name
      - price
      - state
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: jacket
        price:
          type: number
          description: Product price without tax
          example: 5666
        category:
          type: number
          description: Category Id
        state:
          type: string
          description: Product current State
          enum:
          - live
          - draft
        mode:
          type: string
          description: Product mode of Availability
          enum:
          - online
          - offline
          - both
        size:
          type: string
          description: Size of the product
          enum:
          - small
          - medium
          - large
        colour:
          type: string
          description: Colour of the product if any
          example: Red
        brand:
          type: string
          description: Brand of the product if any
          example: Killer
        metadata:
          type: string
          description: Details and descriptions about the product
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: himansh
        firstName:
          type: string
          example: Himanshu
        lastName:
          type: string
          example: Tiwari
        email:
          type: string
          example: himansh181310@gmail.com
        password:
          type: string
        phone:
          type: string
          example: 9415XXXXXX
        userStatus:
          type: integer
          description: User Status
          format: int32
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    ProdDictResp:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Product'
